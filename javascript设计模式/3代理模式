# 虚拟代理实现图片预加载

```
var myImage = (function(){
		var imgNode = document.createElement( 'img' );
		document.body.appendChild( imgNode );
		return {
			setSrc: function( src ){
				imgNode.src = src;
			}
		}
	})();
	var proxyImage = (function(){
		var img = new Image;
		img.onload = function(){
			myImage.setSrc( this.src );
		}
		return {
			setSrc: function( src ){
				myImage.setSrc( 'file:// /C:/Users/svenzeng/Desktop/loading.gif' );
				img.src = src;
			}
		}
	})();
	proxyImage.setSrc( 'http:// imgcache.qq.com/music/photo/k/000GGDys0yA0Nk.jpg' );
  
  
 var myImage = (function(){
		var imgNode = document.createElement( 'img' );
		document.body.appendChild( imgNode );
		return function( src ){
			imgNode.src = src;
		}
	})();
	var proxyImage = (function(){
		var img = new Image;
		img.onload = function(){
			myImage( this.src );
		}
		return function( src ){
			myImage( 'file:// /C:/Users/svenzeng/Desktop/loading.gif' );
			img.src = src;

		}
	})();
	proxyImage( 'http:// imgcache.qq.com/music// N/k/000GGDys0yA0Nk.jpg' ); 
  ```
  
  # 虚拟代理合并HTTP请求
  ```
  var synchronousFile = function( id ){
		console.log( '开始同步文件，id 为: ' + id );
	};

	var proxySynchronousFile = (function(){
		var cache = [], // 保存一段时间内需要同步的ID
		timer; // 定时器
		return function( id ){
			cache.push( id );
			if ( timer ){ // 保证不会覆盖已经启动的定时器
				return;
			}
			timer = setTimeout(function(){
			synchronousFile( cache.join( ',' ) ); // 2 秒后向本体发送需要同步的ID 集合
			clearTimeout( timer ); // 清空定时器
			timer = null;
			cache.length = 0; // 清空ID 集合
		}, 2000 );
		}
	})();

	var checkbox = document.getElementsByTagName( 'input' );
	for ( var i = 0, c; c = checkbox[ i++ ]; ){
		c.onclick = function(){
			if ( this.checked === true ){
				proxySynchronousFile( this.id );
			}
		}
	};
  ```
  
  # 缓存代理-计算乘积
  
  ```
  
	var mult = function(){
		console.log( '开始计算乘积' );
		var a = 1;
		for ( var i = 0, l = arguments.length; i < l; i++ ){
			a = a * arguments[i];
		}
		return a;
	};
	mult( 2, 3 ); // 输出：6
	mult( 2, 3, 4 ); // 输出：24
	//现在加入缓存代理函数：

	var proxyMult = (function(){
		var cache = {};
		return function(){
			var args = Array.prototype.join.call( arguments, ',' );
			if ( args in cache ){
				return cache[ args ];
			}
			return cache[ args ] = mult.apply( this, arguments );
		}
	})();

	proxyMult( 1, 2, 3, 4 ); // 输出：24
	proxyMult( 1, 2, 3, 4 ); // 输出：24
  ```
